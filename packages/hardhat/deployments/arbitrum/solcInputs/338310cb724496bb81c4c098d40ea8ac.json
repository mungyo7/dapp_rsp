{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/RockPaperScissors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract RockPaperScissors is Ownable {\r\n    constructor() Ownable() {}\r\n\r\n    event GamePlayed(\r\n        address indexed player,\r\n        uint8 playerChoice,\r\n        uint8 contractChoice,\r\n        uint8 result,\r\n        uint256 payout\r\n    );\r\n\r\n    event FundsWithdrawn(address indexed owner, uint256 amount);\r\n\r\n    // 컨트랙트 잔액 확인\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // 게임 플레이 함수\r\n    function play(uint8 _playerChoice) public payable {\r\n        require(msg.value > 0, \"Betting amount must be greater than 0\");\r\n        require(_playerChoice >= 1 && _playerChoice <= 3, \"Invalid choice\");\r\n        \r\n        // 컨트랙트의 잔액이 승리 상금(베팅 금액과 동일)을 지급할 수 있는지 확인\r\n        require(address(this).balance >= msg.value, \"Contract doesn't have enough balance for reward\");\r\n\r\n        uint8 contractChoice = uint8((block.number % 3) + 1); // 1, 2, 3\r\n        uint8 result;\r\n        uint256 payout;\r\n\r\n        // 게임 결과 계산 (1: 바위, 2: 보, 3: 가위)\r\n        if (_playerChoice == contractChoice) {\r\n            // 무승부\r\n            result = 1;\r\n            payout = msg.value; // 베팅 금액만 반환\r\n        } else if (\r\n            (_playerChoice == 1 && contractChoice == 3) || // 바위 vs 가위\r\n            (_playerChoice == 2 && contractChoice == 1) || // 보 vs 바위\r\n            (_playerChoice == 3 && contractChoice == 2)    // 가위 vs 보\r\n        ) {\r\n            // 승리\r\n            result = 2;\r\n            payout = msg.value * 2; // 베팅 금액 + 상금(베팅 금액만큼)\r\n        } else {\r\n            // 패배\r\n            result = 0;\r\n            payout = 0; // 베팅 금액 잃음\r\n        }\r\n\r\n        // 승리하거나 무승부인 경우에만 보상금 지급\r\n        if (payout > 0) {\r\n            (bool success, ) = payable(msg.sender).call{value: payout}(\"\");\r\n            require(success, \"Failed to send payout\");\r\n        }\r\n\r\n        emit GamePlayed(msg.sender, _playerChoice, contractChoice, result, payout);\r\n    }\r\n\r\n    // 컨트랙트 소유자가 자금을 인출하는 함수\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds to withdraw\");\r\n        \r\n        (bool success, ) = payable(owner()).call{value: balance}(\"\");\r\n        require(success, \"Failed to withdraw funds\");\r\n        \r\n        emit FundsWithdrawn(owner(), balance);\r\n    }\r\n\r\n    // 컨트랙트가 이더를 받을 수 있도록 하는 함수\r\n    receive() external payable {}\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}